local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Dead Rails || Flandre Hub Premium",
   Icon = 125307995960610, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Welcome to Flandre Hub",
   LoadingSubtitle = "Script Make By 54hz",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "flandrehub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Flandre Hub",
      Subtitle = "Key Stytems",
      Note = "to get key,chat to my bot in discord :nhm_roblox", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"b8d83ed2e0bbf2e4f45aa3c0166816dc"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

Rayfield:Notify({
   Title = "thanks for buy script",
   Content = "discord:https://discord.gg/NtakBUPbkW",
   Duration = 6.5,
   Image = 4483362458,
})

local Tab = Window:CreateTab("Mainü§î", 4483362458) -- Title, Image

local Divider = Tab:CreateDivider()

local Label = Tab:CreateLabel("Esp", 4483362458, Color3.fromRGB(255, 255, 255), false) -- Title, Icon, Color, IgnoreTheme

local Toggle = Tab:CreateToggle({
   Name = "Esp Npc",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
-- ESP Mob

getgenv().ESPEnabled = Value -- B·∫≠t/t·∫Øt ESP

local espObjects = {} -- L∆∞u danh s√°ch ESP ƒë·ªÉ x√≥a khi c·∫ßn

local function createESP(obj)
    if obj:FindFirstChild("HumanoidRootPart") and obj:FindFirstChild("Humanoid") then
        -- X√°c ƒë·ªãnh m√†u d·ª±a tr√™n t√™n mob
        local dangerousMobs = {
            "Vampire", "Werewolf", 
            "RifleOutlaw", "ShotgunOutlaw", "RevolverOutlaw"
        }
        
        local highlightColor, textColor

        if table.find(dangerousMobs, obj.Name) then
            highlightColor = Color3.fromRGB(255, 0, 0) -- ƒê·ªè
            textColor = Color3.fromRGB(255, 0, 0) -- ƒê·ªè
        elseif obj.Name == "Banker" then
            highlightColor = Color3.fromRGB(255, 255, 0) -- V√†ng
            textColor = Color3.fromRGB(255, 255, 0) -- V√†ng
        else
            highlightColor = Color3.fromRGB(0, 255, 0) -- Xanh l√°
            textColor = Color3.fromRGB(0, 255, 0) -- Xanh l√°
        end

        -- T·∫°o highlight
        local highlight = Instance.new("Highlight")
        highlight.Parent = obj
        highlight.FillColor = highlightColor
        highlight.OutlineColor = highlightColor
        highlight.FillTransparency = 0.5
        highlight.OutlineTransparency = 0

        -- T·∫°o BillboardGui ƒë·ªÉ hi·ªÉn th·ªã t√™n mob
        local billboard = Instance.new("BillboardGui")
        billboard.Parent = obj.HumanoidRootPart
        billboard.Adornee = obj.HumanoidRootPart
        billboard.Size = UDim2.new(0, 100, 0, 25) -- Gi·∫£m k√≠ch th∆∞·ªõc c·ªßa b·∫£ng hi·ªÉn th·ªã
        billboard.StudsOffset = Vector3.new(0, 3, 0)
        billboard.AlwaysOnTop = true

        -- T·∫°o TextLabel ƒë·ªÉ hi·ªÉn th·ªã t√™n mob
        local textLabel = Instance.new("TextLabel")
        textLabel.Parent = billboard
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.Text = obj.Name
        textLabel.TextColor3 = textColor
        textLabel.TextScaled = false
        textLabel.TextSize = 14
        textLabel.Font = Enum.Font.SourceSansBold

        -- L∆∞u ESP ƒë·ªÉ c√≥ th·ªÉ x√≥a sau n√†y
        table.insert(espObjects, highlight)
        table.insert(espObjects, billboard)
    end
end

local function clearESP()
    for _, esp in pairs(espObjects) do
        if esp and esp.Parent then
            esp:Destroy()
        end
    end
    espObjects = {}
end

-- Ch·∫°y l·∫∑p ESP m·ªói 0.2 gi√¢y
task.spawn(function()
    while task.wait(0.2) do
        if not getgenv().ESPEnabled then
            clearESP()
            break
        end

        clearESP() -- X√≥a ESP c≈© tr∆∞·ªõc khi t·∫°o l·∫°i

        -- √Åp d·ª•ng ESP cho t·∫•t c·∫£ mob trong game
        for _, obj in pairs(workspace:GetDescendants()) do
            if obj:IsA("Model") and obj:FindFirstChild("Humanoid") then
                createESP(obj)
            end
        end
    end
end)

   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Esp item",
   CurrentValue = false,
   Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
-- ESP Item
getgenv().ESPEnabled = Value -- B·∫≠t/t·∫Øt hi·ªÉn th·ªã

local espObjects = {} -- Danh s√°ch c√°c ƒë·ªëi t∆∞·ª£ng ESP ƒë·ªÉ x√≥a khi c·∫ßn

local function createESP(obj)
    -- Ch·ªâ √°p d·ª•ng n·∫øu obj c√≥ "ObjectInfo" v√† kh√¥ng c√≥ "HumanoidRootPart"
    if obj:FindFirstChild("ObjectInfo") and not obj:FindFirstChild("HumanoidRootPart") then
        local highlightColor = Color3.fromRGB(255, 255, 255) -- M√†u tr·∫Øng
        local textColor = Color3.fromRGB(255, 255, 255) -- M√†u tr·∫Øng

        -- T·∫°o highlight
        local highlight = Instance.new("Highlight")
        highlight.Parent = obj
        highlight.FillColor = highlightColor
        highlight.OutlineColor = highlightColor
        highlight.FillTransparency = 0.5
        highlight.OutlineTransparency = 0

        -- T·∫°o BillboardGui ƒë·ªÉ hi·ªÉn th·ªã t√™n v·∫≠t ph·∫©m
        local billboard = Instance.new("BillboardGui")
        billboard.Parent = obj
        billboard.Size = UDim2.new(0, 100, 0, 20) -- Gi·∫£m k√≠ch th∆∞·ªõc
        billboard.StudsOffset = Vector3.new(0, 3, 0)
        billboard.AlwaysOnTop = true

        -- T·∫°o TextLabel ƒë·ªÉ hi·ªÉn th·ªã t√™n v·∫≠t ph·∫©m
        local textLabel = Instance.new("TextLabel")
        textLabel.Parent = billboard
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.Text = obj.Name
        textLabel.TextColor3 = textColor
        textLabel.TextScaled = false
        textLabel.TextSize = 10 -- Gi·∫£m c·ª° ch·ªØ
        textLabel.Font = Enum.Font.SourceSansBold

        -- G√°n BillboardGui v√†o m·ªôt ph·∫ßn th√≠ch h·ª£p (v√≠ d·ª•: ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n)
        local adorneePart = obj:FindFirstChildWhichIsA("BasePart")
        if adorneePart then
            billboard.Adornee = adorneePart
        else
            billboard:Destroy() -- N·∫øu kh√¥ng t√¨m th·∫•y ph·∫ßn th√≠ch h·ª£p, x√≥a Billboard
        end

        -- L∆∞u ESP ƒë·ªÉ c√≥ th·ªÉ x√≥a sau n√†y
        table.insert(espObjects, highlight)
        table.insert(espObjects, billboard)
    end
end

local function clearESP()
    for _, esp in pairs(espObjects) do
        if esp and esp.Parent then
            esp:Destroy()
        end
    end
    espObjects = {}
end

-- Ch·∫°y l·∫∑p ki·ªÉm tra m·ªói 0.2 gi√¢y
task.spawn(function()
    while task.wait(0.2) do
        if not getgenv().ESPEnabled then
            clearESP()
            break
        end

        clearESP() -- X√≥a highlight c≈© tr∆∞·ªõc khi t·∫°o l·∫°i

        -- √Åp d·ª•ng cho t·∫•t c·∫£ c√°c v·∫≠t ph·∫©m trong game
        for _, obj in pairs(workspace:GetDescendants()) do
            if obj:IsA("Model") then
                createESP(obj)
            end
        end
    end
end)

   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Label = Tab:CreateLabel("Misc", 4483362458, Color3.fromRGB(255, 255, 255), false) -- Title, Icon, Color, IgnoreTheme

local Toggle = Tab:CreateToggle({
   Name = "Aimbot V1",
   CurrentValue = false,
   Flag = "2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
getgenv().aimbotEnabled = Value  -- M·∫∑c ƒë·ªãnh t·∫Øt

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local camera = Workspace.CurrentCamera
local player = Players.LocalPlayer

local function getClosestNPCTarget()
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        return nil
    end

    local closestNPCHead = nil
    local shortestDistance = math.huge

    for _, npc in ipairs(Workspace:GetDescendants()) do
        if npc:IsA("Model") and npc:FindFirstChild("Humanoid") and npc:FindFirstChild("Head") and not Players:GetPlayerFromCharacter(npc) then
            local humanoid = npc.Humanoid
            local head = npc.Head
            local distance = (head.Position - character.HumanoidRootPart.Position).Magnitude

            if humanoid.Health > 0 and distance < shortestDistance and distance <= 300 then
                shortestDistance = distance
                closestNPCHead = head
            end
        end
    end

    return closestNPCHead
end

RunService.RenderStepped:Connect(function()
    if getgenv().aimbotEnabled then
        local targetHead = getClosestNPCTarget()
        if targetHead then
            local headPos = targetHead.Position + Vector3.new(0, targetHead.Size.Y / 2, 0)
            local camPos = camera.CFrame.Position
            local newCFrame = CFrame.lookAt(camPos, headPos)
            camera.CFrame = newCFrame
        end
    end
end)

   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Aimbot V2",
   CurrentValue = false,
   Flag = "Toggle3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
getgenv().npcLockEnabled = Value  -- M·∫∑c ƒë·ªãnh t·∫Øt

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera
local player = Players.LocalPlayer

local function getClosestNPC()
    local closestNPC = nil
    local closestDistance = math.huge

    for _, object in ipairs(workspace:GetDescendants()) do
        if object:IsA("Model") then
            local humanoid = object:FindFirstChild("Humanoid") or object:FindFirstChildWhichIsA("Humanoid")
            local hrp = object:FindFirstChild("HumanoidRootPart") or object.PrimaryPart
            if humanoid and hrp and humanoid.Health > 0 and object.Name ~= "Horse" then
                local isPlayer = false
                for _, pl in ipairs(Players:GetPlayers()) do
                    if pl.Character == object then
                        isPlayer = true
                        break
                    end
                end
                if not isPlayer then
                    local distance = (hrp.Position - player.Character.HumanoidRootPart.Position).Magnitude
                    if distance < closestDistance then
                        closestDistance = distance
                        closestNPC = object
                    end
                end
            end
        end
    end

    return closestNPC
end

spawn(function()
    while true do
        if getgenv().npcLockEnabled then
            local npc = getClosestNPC()
            if npc and npc:FindFirstChild("Humanoid") and npc.Humanoid.Health > 0 then
                camera.CameraSubject = npc.Humanoid
            else
                if player.Character and player.Character:FindFirstChild("Humanoid") then
                    camera.CameraSubject = player.Character:FindFirstChild("Humanoid")
                end
            end
        end
        wait()  -- Gi·∫£m t·∫£i CPU
    end
end)

   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Zombie Hitbox",
   CurrentValue = false,
   Flag = "Toggle4", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
getgenv().hitboxEnabled = Value  -- M·∫∑c ƒë·ªãnh t·∫Øt

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local defaultHRPValues = {}

local function updateNPCHitbox(npc)
    if npc:IsA("Model") and npc:FindFirstChild("HumanoidRootPart") and npc:FindFirstChild("Humanoid") then
        if Players:GetPlayerFromCharacter(npc) then return end  -- B·ªè qua ng∆∞·ªùi ch∆°i

        local humanoid = npc.Humanoid
        local hrp = npc.HumanoidRootPart

        if not defaultHRPValues[hrp] then
            defaultHRPValues[hrp] = {Size = hrp.Size, Transparency = hrp.Transparency, CanCollide = hrp.CanCollide}
        end

        local function updateHitbox()
            if getgenv().hitboxEnabled and humanoid.Health > 0 then
                hrp.Size = Vector3.new(10, 10, 10)
                hrp.Transparency = 0.85
                hrp.CanCollide = false
            else
                local defaults = defaultHRPValues[hrp]
                if defaults then
                    hrp.Size = defaults.Size
                    hrp.Transparency = defaults.Transparency
                    hrp.CanCollide = defaults.CanCollide
                end
            end
        end

        humanoid:GetPropertyChangedSignal("Health"):Connect(function()
            if humanoid.Health <= 0 then
                local defaults = defaultHRPValues[hrp]
                if defaults then
                    hrp.Size = defaults.Size
                    hrp.Transparency = defaults.Transparency
                    hrp.CanCollide = defaults.CanCollide
                end
            end
        end)

        updateHitbox()
    end
end

local function updateAllNPCsHitbox()
    for _, obj in ipairs(Workspace:GetDescendants()) do
        updateNPCHitbox(obj)
    end
end

Workspace.DescendantAdded:Connect(function(obj)
    updateNPCHitbox(obj)
end)

spawn(function()
    while true do
        if getgenv().hitboxEnabled then
            updateAllNPCsHitbox()
        end
        wait(1)  -- Ki·ªÉm tra m·ªói gi√¢y, gi·∫£m t·∫£i CPU
    end
end)

   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Button = Tab:CreateButton({
   Name = "script l√†m b·ªüi 54hz,script make by 54hz",
   Callback = function()
   -- The function that takes place when the button is pressed
   end,
})
